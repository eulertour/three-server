syntax = "proto3";
package testservice;

service TestService {
  rpc GetHello(HelloRequest) returns (HelloResponse) {}
}
message HelloRequest {}
message HelloResponse {
  string response = 1;
}

service GeometryService {
  rpc Geometry(GeometryRequest) returns (GeometryResponse) {}
  rpc BoxGeometry(BoxGeometryRequest) returns (BoxGeometryResponse) {}
  rpc SphereGeometry(SphereGeometryRequest) returns (SphereGeometryResponse) {}
  rpc TorusKnotGeometry(TorusKnotGeometryRequest) returns (TorusKnotGeometryResponse) {}
  rpc IcosahedronGeometry(IcosahedronGeometryRequest) returns (IcosahedronGeometryResponse) {}
  rpc TetrahedronGeometry(TetrahedronGeometryRequest) returns (TetrahedronGeometryResponse) {}
  rpc CylinderGeometry(CylinderGeometryRequest) returns (CylinderGeometryResponse) {}
  rpc ConeGeometry(ConeGeometryRequest) returns (ConeGeometryResponse) {}
  rpc CircleGeometry(CircleGeometryRequest) returns (CircleGeometryResponse) {}
  rpc PlaneGeometry(PlaneGeometryRequest) returns (PlaneGeometryResponse) {}
}

service MaterialService {
  rpc BasicMaterial(BasicMaterialRequest) returns (MaterialResponse) {}
  rpc PhongMaterial(PhongMaterialRequest) returns (MaterialResponse) {}
  rpc StandardMaterial(StandardMaterialRequest) returns (MaterialResponse) {}
}

message BasicMaterialRequest {}
message PhongMaterialRequest {}
message StandardMaterialRequest {}

message MaterialResponse {
  string vertex_shader = 1;
  string fragment_shader = 2;
}

message IcosahedronGeometryRequest {
  float radius = 1;
  int32 detail = 2;
  bool wireframe = 3;
}

message IcosahedronGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message TorusKnotGeometryRequest {
  float torus_radius = 1;
  float tube_radius = 2;
  int32 tubular_segments = 3;
  int32 radial_segments = 4;
  int32 p = 5;
  int32 q = 6;
  bool wireframe = 7;
}

message TorusKnotGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}


message SphereGeometryRequest {
  float radius = 1;
  int32 width_segments = 2;
  int32 height_segments = 3;
  float phi_start = 4;
  float phi_length = 5;
  float theta_start = 6;
  float theta_length = 7;
  bool wireframe = 8;
}

message SphereGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message BoxGeometryRequest {
  float width = 1;
  float height = 2;
  float depth = 3;
  int32 width_segments = 4;
  int32 height_segments = 5;
  int32 depth_segments = 6;
  bool wireframe = 7;
}

message BoxGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message TetrahedronGeometryRequest {
  float radius = 1;
  int32 detail = 2;
  bool wireframe = 3;
}

message TetrahedronGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message CylinderGeometryRequest {
  float radius_top = 1;
  float radius_bottom = 2;
  float height = 3;
  int32 radial_segments = 4;
  int32 height_segments = 5;
  bool open_ended = 6;
  float theta_start = 7;
  float theta_length = 8;
  bool wireframe = 9;
}

message CylinderGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message ConeGeometryRequest {
  float radius = 1;
  float height = 2;
  int32 radialSegments = 3;
  int32 heightSegments = 4;
  bool openEnded = 5;
  float thetaStart = 6;
  float thetaLength = 7;
  bool wireframe = 8;
}

message ConeGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message CircleGeometryRequest {
  float radius = 1;
  int32 segments = 2;
  float thetaStart = 3;
  float thetaLength = 4;
  bool wireframe = 5;
}

message CircleGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}

message PlaneGeometryRequest {
  float width = 1;
  float height = 2;
  int32 widthSegments = 3;
  int32 heightSegments = 4;
  bool wireframe = 5;
}

message PlaneGeometryResponse {
  repeated float position = 1;
  repeated float normal = 2;
  repeated float uv = 3;
  repeated int32 index = 4;
}


message GeometryRequest {}
message GeometryResponse {
  repeated float position = 1;
  repeated int32 index = 2;
}

